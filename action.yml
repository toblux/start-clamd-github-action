name: ClamAV Daemon
description: Start ClamAV daemon clamd for antivirus scanning
author: Thorsten Blum
branding:
  icon: server
  color: blue
inputs:
  unix_socket:
    description: Path to a Unix socket clamd will listen on
    default: /tmp/clamd.socket
  tcp_port:
    description: TCP port clamd will listen on
    default: 3310
  stream_max_length:
    description: Streaming size limit
    default: 1M
  log_verbose:
    description: Enable verbose logging
    default: false
  log_file:
    description: Enable logging to the selected file
    required: false
    type: string
  db_main:
    description: Download the "main" virus database (> 160 MB)
    default: false
  db_daily:
    description: Download the "daily" virus database (> 60 MB)
    default: false
  debug:
    description: Enable debug messages from libclamav
    default: false
runs:
  using: composite
  steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Configure freshclam and clamd
      shell: bash
      run: |
        echo DatabaseMirror database.clamav.net >> freshclam.conf
        echo TCPSocket ${{ inputs.tcp_port }} >> clamd.conf
        echo StreamMaxLength ${{ inputs.stream_max_length }} >> clamd.conf
        echo LogVerbose ${{ inputs.log_verbose }} >> clamd.conf
        echo Debug ${{ inputs.debug }} >> clamd.conf
    - name: Add log file if needed
      if: ${{ inputs.log_file != '' }}
      shell: bash
      run: echo LogFile ${{ inputs.log_file }} >> clamd.conf
    - name: Configure clamd (Linux and macOS only)
      if: runner.os != 'Windows'
      shell: bash
      run: echo LocalSocket ${{ inputs.unix_socket }} >> clamd.conf
    # macOS
    - name: Install and start ClamAV daemon on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install clamav
        freshclam -F --config-file=freshclam.conf --update-db=bytecode \
          $([ ${{ inputs.db_main }} = true ] && echo "--update-db=main") \
          $([ ${{ inputs.db_daily }} = true ] && echo "--update-db=daily")
        clamd --config-file=clamd.conf
    # Linux
    - name: Install and start ClamAV daemon on Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install clamav-daemon
        sudo systemctl stop clamav-freshclam
        sudo freshclam -F --update-db=bytecode \
          $([ ${{ inputs.db_main }} = true ] && echo "--update-db=main") \
          $([ ${{ inputs.db_daily }} = true ] && echo "--update-db=daily")
        clamd --config-file=clamd.conf
    # Windows
    - name: Install and start ClamAV daemon on Windows
      if: runner.os == 'Windows'
      env:
        CLAMAV_WIN_VERSION: clamav-1.0.4.win.x64
        DB_MAIN: ${{ inputs.db_main }}
        DB_DAILY: ${{ inputs.db_daily }}
      shell: pwsh
      run: |
        $clamavDir = Join-Path $env:RUNNER_TEMP $env:CLAMAV_WIN_VERSION
        $clamavZipFilePath = Join-Path $env:RUNNER_TEMP clamav.zip
        Invoke-WebRequest -Uri "https://www.clamav.net/downloads/production/$env:CLAMAV_WIN_VERSION.zip" -OutFile $clamavZipFilePath
        Expand-Archive -Path $clamavZipFilePath -DestinationPath $env:RUNNER_TEMP
        Copy-Item clamd.conf -Destination $clamavDir
        Copy-Item freshclam.conf -Destination $clamavDir
        & "$clamavDir\freshclam.exe" -F --update-db=bytecode `
          $(if ($env:DB_MAIN -eq "true") { "--update-db=main" }) `
          $(if ($env:DB_DAILY -eq "true") { "--update-db=daily" })
        & "$clamavDir\clamd.exe" --install-service
        net start clamd
